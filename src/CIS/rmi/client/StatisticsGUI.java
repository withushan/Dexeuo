/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CIS.rmi.client;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.border.Border;

/**
 *
 * @author Withushan
 */
public class StatisticsGUI extends javax.swing.JFrame {

    /**
     * Creates new form StatisticsGUI
     */
    public StatisticsGUI() {
        initComponents();
    }
    
    //global varriables
    Connection con;
    PreparedStatement pst;
    ResultSet rst;
    
    /***
     * This method without a parameter
     * This method used to a database
     */
    
    public void databaseConnection()
    {
        try {
            /* The suspect that this block of statement can throw 
             * exception so we handled it by placing these statements
             * inside try and handled the exception in catch block
             */
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/cis","root", "");
            
        } catch (ClassNotFoundException ex) {
            /* This block will only execute if any ClassNotFound exception 
             * occurs in try block
            */
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            /* This block will only execute if any SQL exception 
             * occurs in try block
            */
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null,ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnQuestion1 = new javax.swing.JButton();
        btnQuestion2 = new javax.swing.JButton();
        btnQuestion3 = new javax.swing.JButton();
        btnQuestion4 = new javax.swing.JButton();
        btnQuestion5 = new javax.swing.JButton();
        btnQuestion6 = new javax.swing.JButton();
        btnQuestion7 = new javax.swing.JButton();
        btnQuestion8 = new javax.swing.JButton();
        btnQuestion9 = new javax.swing.JButton();
        btnQuestion10 = new javax.swing.JButton();
        jLabel_minimize = new javax.swing.JLabel();
        jLabel_close = new javax.swing.JLabel();
        jButtonback = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Statistics");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("1. The lecturer motivated me to do my best.  ");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("2. The lecturer was confident to teach the subject matter.   ");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("3. The lecturer was punctual (Lecturer was present at the correct time).  ");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("4. Lectures, tutorials and practicals (Labs) were well structured and useful for you to understand the subject.  ");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("5. The syllabus and learning outcomes were given at the beginning.   ");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("6. Workload (Lectures & CA) of this module was reasonable.    ");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("7. The lecturer was willing to exchange the interest of module with students.     ");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("8. Relevant course matter was provided.  ");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("9. Syllabus was substantially covered in the class. ");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("10. Practical applications relevant to the module were discussed.   ");

        btnQuestion1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion1.setText("View");
        btnQuestion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion1ActionPerformed(evt);
            }
        });

        btnQuestion2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion2.setText("View");
        btnQuestion2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion2ActionPerformed(evt);
            }
        });

        btnQuestion3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion3.setText("View");
        btnQuestion3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion3ActionPerformed(evt);
            }
        });

        btnQuestion4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion4.setText("View");
        btnQuestion4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion4ActionPerformed(evt);
            }
        });

        btnQuestion5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion5.setText("View");
        btnQuestion5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion5ActionPerformed(evt);
            }
        });

        btnQuestion6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion6.setText("View");
        btnQuestion6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion6ActionPerformed(evt);
            }
        });

        btnQuestion7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion7.setText("View");
        btnQuestion7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion7ActionPerformed(evt);
            }
        });

        btnQuestion8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion8.setText("View");
        btnQuestion8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion8ActionPerformed(evt);
            }
        });

        btnQuestion9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion9.setText("View");
        btnQuestion9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion9ActionPerformed(evt);
            }
        });

        btnQuestion10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnQuestion10.setText("View");
        btnQuestion10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestion10ActionPerformed(evt);
            }
        });

        jLabel_minimize.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel_minimize.setText("-");
        jLabel_minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_minimizeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_minimizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel_minimizeMouseExited(evt);
            }
        });

        jLabel_close.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel_close.setText("X");
        jLabel_close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel_closeMouseExited(evt);
            }
        });

        jButtonback.setBackground(new java.awt.Color(204, 255, 255));
        jButtonback.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonback.setText("Back");
        jButtonback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonbackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(btnQuestion2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(36, 36, 36)
                                .addComponent(btnQuestion1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnQuestion3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnQuestion4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnQuestion5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnQuestion6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(btnQuestion7))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(btnQuestion8))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnQuestion9)))
                        .addContainerGap(16, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnQuestion10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonback)
                        .addGap(25, 25, 25))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(386, 386, 386)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_minimize)
                .addGap(18, 18, 18)
                .addComponent(jLabel_close)
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_minimize)
                        .addComponent(jLabel_close)))
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnQuestion1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(btnQuestion2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(btnQuestion3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(btnQuestion4))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(btnQuestion5))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(btnQuestion6))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(btnQuestion7))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(btnQuestion8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(btnQuestion9))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(btnQuestion10)
                    .addComponent(jButtonback))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuestion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion1ActionPerformed
        // TODO add your handling code here:
       try{
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 1 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 1 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 1 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 1 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 1 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'pie',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            //This is for pie chart UI
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 01");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }           
    }//GEN-LAST:event_btnQuestion1ActionPerformed

    private void btnQuestion2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion2ActionPerformed
        // TODO add your handling code here:
        try{
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 2 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 2 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 2 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 2 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 2 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'bar',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            //This is for bar chart UI
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 02");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }                      
        
    }//GEN-LAST:event_btnQuestion2ActionPerformed

    private void btnQuestion3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion3ActionPerformed
        // TODO add your handling code here:
        try{
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 3 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 3 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 3 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 3 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 3 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'doughnut',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            //This is for doughnut chart UI
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 03");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }          
                                             
    }//GEN-LAST:event_btnQuestion3ActionPerformed

    private void btnQuestion4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion4ActionPerformed
        // TODO add your handling code here:
        try{
            /* The suspect that this block of statement can throw 
             * exception so we handled it by placing these statements
             * inside try and handled the exception in catch block
             */
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 4 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 4 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 4 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 4 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 4 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'pie',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            //This is for pie chart UI
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 04");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }      
                                              
    }//GEN-LAST:event_btnQuestion4ActionPerformed

    private void btnQuestion5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion5ActionPerformed
        // TODO add your handling code here:
        try{
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 5 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 5 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 5 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 5 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 5 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'pie',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            //This is for pie chart UI
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 05");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }                                    
    }//GEN-LAST:event_btnQuestion5ActionPerformed

    private void btnQuestion6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion6ActionPerformed
        // TODO add your handling code here:
        try{
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 6 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 6 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 6 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 6 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 6 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'pie',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            //This is for pie chart UI
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 06");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }                                             
    }//GEN-LAST:event_btnQuestion6ActionPerformed

    private void btnQuestion7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion7ActionPerformed
        // TODO add your handling code here:
        try{
            /* The suspect that this block of statement can throw 
             * exception so we handled it by placing these statements
             * inside try and handled the exception in catch block
             */
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 7 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 7 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 7 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 7 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 7 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'pie',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            //This is for pie chart UI
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 07");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }                                      
    }//GEN-LAST:event_btnQuestion7ActionPerformed

    private void btnQuestion8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion8ActionPerformed
        // TODO add your handling code here:
        try{
            /* The suspect that this block of statement can throw 
             * exception so we handled it by placing these statements
             * inside try and handled the exception in catch block
             */
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 8 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 8 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 8 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 8 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 8 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'pie',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            //This is for pie chart UI
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 08");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }                                          
    }//GEN-LAST:event_btnQuestion8ActionPerformed

    private void btnQuestion9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion9ActionPerformed
        // TODO add your handling code here:
        try{
            /* The suspect that this block of statement can throw 
             * exception so we handled it by placing these statements
             * inside try and handled the exception in catch block
             */
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 9 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 9 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 9 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 9 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 9 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'pie',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            //This is for pie chart UI
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 09");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }                                          
    }//GEN-LAST:event_btnQuestion9ActionPerformed

    private void btnQuestion10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestion10ActionPerformed
        // TODO add your handling code here:
        try{
            /* The suspect that this block of statement can throw 
             * exception so we handled it by placing these statements
             * inside try and handled the exception in catch block
             */
            databaseConnection ();
                 
            
            String answers1 = "", answers2 = "", answers3 = "", answers4 = "", answers5 = "", Link = "" ;
            BufferedImage image = null;
            
            String Sql1 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 10 and answers = \"Strongly Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql1);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers1= rst.getString(1);
                        }
                    }catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
            String Sql2 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 10 and answers = \"Agree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql2);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers2 = rst.getString(1);
                        }
                        
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    
            String Sql3 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 10 and answers = \"Neutral\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql3);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers3 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql4 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 10 and answers = \"Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql4);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers4 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    String Sql5 = "SELECT COUNT(User_Id) FROM answers WHERE Question_No = 10 and answers =\"Strongly Disagree\"";
                    
                    try{
                        /* The suspect that this block of statement can throw 
                         * exception so we handled it by placing these statements
                         * inside try and handled the exception in catch block
                         */
                        pst = con.prepareStatement(Sql5);
                        rst = pst.executeQuery();
                        while(rst.next())
                        {
                            answers5 = rst.getString(1);
                        }      
                    } catch (SQLException ex) {
                        /* This block will only execute if any SQL exception 
                         * occurs in try block
                         */
                        System.out.println(ex.getMessage());
                    }
                    //calling the API
                    Link = "https://quickchart.io/chart?bkg=white&c={ type: 'pie',data: { datasets: [ { data: [\'" + answers1 + "\',\'" + answers2 + "\',\'" + answers3 + "\',\'" + answers4 + "\',\'" + answers5 + "\'], backgroundColor: [ 'rgb(255,55,132)', 'rgb(54,162,235)', 'rgb(75,192,192)',  'rgb(247,120,37)',  'rgb(153,102,255)'  ], label: 'Range', }, ], labels: ['Strongly Agree', 'Agree', 'Neutral', 'Disagree', 'Strongly Disagree'],},}";
            
                    Link = Link.replace(" ", "");
                    URL url1 = new URL(Link);
            
                    HttpURLConnection urlcon = (HttpURLConnection) url1.openConnection();
            
                    urlcon.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
            
            image = ImageIO.read(urlcon.getInputStream());
            
            JFrame jframe = new JFrame();  
            jframe.setTitle("Statics of Question 10");
            jframe.setSize(1100, 650);
            jframe.setResizable(false);
            JLabel image_label = new JLabel(new ImageIcon(image));
            jframe.getContentPane().setBackground(Color.white);
            jframe.getContentPane().add(image_label,BorderLayout.NORTH);
            jframe.setVisible(true);
            jframe.setLocationRelativeTo(null);
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StatisticsGUI.class.getName()).log(Level.SEVERE, null, ex);           
        }                                      
    }//GEN-LAST:event_btnQuestion10ActionPerformed

    private void jLabel_minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_minimizeMouseClicked
        // TODO add your handling code here:
        this.setState(JFrame.ICONIFIED);
        
    }//GEN-LAST:event_jLabel_minimizeMouseClicked

    private void jLabel_minimizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_minimizeMouseEntered
        // TODO add your handling code here:
        Border label_border = BorderFactory.createMatteBorder(1,1,1,1, Color.white);
        jLabel_minimize.setForeground(Color.white);
        jLabel_minimize.setBorder(label_border);
    }//GEN-LAST:event_jLabel_minimizeMouseEntered

    private void jLabel_minimizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_minimizeMouseExited
        // TODO add your handling code here:
        Border label_border = BorderFactory.createMatteBorder(1,1,1,1, Color.black);
        jLabel_minimize.setBorder(label_border);
        jLabel_minimize.setForeground(Color.black);
    }//GEN-LAST:event_jLabel_minimizeMouseExited

    private void jLabel_closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_closeMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabel_closeMouseClicked

    private void jLabel_closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_closeMouseEntered
        // TODO add your handling code here:
        Border label_border = BorderFactory.createMatteBorder(1,1,1,1, Color.white);
        jLabel_close.setForeground(Color.white);
        jLabel_close.setBorder(label_border);
    }//GEN-LAST:event_jLabel_closeMouseEntered

    private void jLabel_closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_closeMouseExited
        // TODO add your handling code here:
        Border label_border = BorderFactory.createMatteBorder(1,1,1,1, Color.black);
        jLabel_minimize.setBorder(label_border);
        jLabel_minimize.setForeground(Color.black);
    }//GEN-LAST:event_jLabel_closeMouseExited

    private void jButtonbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonbackActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        AdminPanelGUI adp1 = new AdminPanelGUI();
        adp1.setVisible(true);
    }//GEN-LAST:event_jButtonbackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatisticsGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnQuestion1;
    private javax.swing.JButton btnQuestion10;
    private javax.swing.JButton btnQuestion2;
    private javax.swing.JButton btnQuestion3;
    private javax.swing.JButton btnQuestion4;
    private javax.swing.JButton btnQuestion5;
    private javax.swing.JButton btnQuestion6;
    private javax.swing.JButton btnQuestion7;
    private javax.swing.JButton btnQuestion8;
    private javax.swing.JButton btnQuestion9;
    private javax.swing.JButton jButtonback;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_close;
    private javax.swing.JLabel jLabel_minimize;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
